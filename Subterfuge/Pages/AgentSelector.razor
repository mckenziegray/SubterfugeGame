@page  "/selectagents"
@inject GameService Game

<div class="row">
    <div class="col center-horizontal">
        <h2>Day @Game.Day</h2>
        <p>Select up to @GameService.MAX_AGENT_SELECTIONS @(GameService.MAX_AGENT_SELECTIONS == 1 ? "agent" : "agents") to assign.</p>

        @foreach (Agent agent in Game.Agents.OrderedList.Where(a => a.Allegiance == Allegiance.Ally))
        {
            bool disabled = !agent.IsActing && NumSelected >= GameService.MAX_AGENT_SELECTIONS;
            <div class="btn-group-toggle" data-toggle="buttons">
                <label class="btn btn-outline-dark @(agent.IsActing ? "active" : disabled ? "disabled" : "")">
                    <input type="checkbox"
                           checked="@agent.IsActing"
                           disabled="@disabled"
                           @onchange="e => OnAgentCheckboxChanged(e, agent)"
                           @onchange:preventDefault
                           autocomplete="off" />
                    @agent.Name
                </label>
            </div>
        }

        <button class="btn btn-info" @onclick="Submit">Confirm</button>
    </div>
</div>

@code
{
    public int NumSelected => Game.Agents.Count(a => a.IsActing);

    protected void OnAgentCheckboxChanged(ChangeEventArgs e, Agent agent)
    {
        bool isChecked = (bool)e.Value;

        if (isChecked)
        {
            if (NumSelected < GameService.MAX_AGENT_SELECTIONS)
            {
                if (agent.RequiresTarget)
                    Nav.NavigateTo($"/selecttarget/{(int)agent.AgentType}");
                else
                    agent.IsActing = true;
            }
        }
        else
        {
            agent.Reset();
        }
    }

    protected void Submit()
    {
        Game.PlayRound();
        Nav.NavigateTo("/results");
    }
}
