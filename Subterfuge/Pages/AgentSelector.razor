@page  "/selectagents"
@inject GameService Game

<div class="row justify-content-center">
    <div class="col center-contents-horizontal">
        <h2>Day @Game.Round</h2>
        <p>Select up to @GameService.MAX_AGENT_SELECTIONS @(GameService.MAX_AGENT_SELECTIONS == 1 ? "agent" : "agents") to assign.</p>

        @for (int i = 0; i < Game.Agents.Allies.Count; i+= 2)
        {
            <div class="row justify-content-center">
                @for (int j = i; j <= i + 1; j++)
                {
                    <div class="col-6 col-sm-5 col-md-3 col-lg-2">
                        @if (j < Game.Agents.Allies.Count)
                        {
                            Agent agent = Game.Agents.Allies[j];
                            bool disabled = !agent.IsAlive || (!agent.IsActing && NumSelected >= GameService.MAX_AGENT_SELECTIONS);
                            <div class="btn-group-toggle" data-toggle="buttons">
                                <label class="btn btn-block btn-outline-dark @(agent.IsActing ? "active" : disabled ? "disabled" : "")">
                                    <input type="checkbox"
                                           checked="@agent.IsActing"
                                           disabled="@disabled"
                                           @onchange="e => OnAgentCheckboxChanged(e, agent)"
                                           @onchange:preventDefault
                                           autocomplete="off" />
                                    @agent.Name
                                </label>
                            </div>
                        }
                    </div>
                }
            </div>
        }

        <div class="row justify-content-center">
            <div class="col">
                <button class="btn btn-primary" @onclick="Continue">Confirm</button>
            </div>
        </div>
    </div>
</div>

@code
{
    public int NumSelected => Game.Agents.Allies.Count(a => a.IsActing);

    protected void OnAgentCheckboxChanged(ChangeEventArgs e, Agent agent)
    {
        bool isChecked = (bool)e.Value;

        if (isChecked)
        {
            if (agent.IsAlive && NumSelected < GameService.MAX_AGENT_SELECTIONS)
            {
                if (agent.RequiresTarget)
                    Nav.NavigateTo($"/selecttarget/{agent.GetType().Name}");
                else
                    agent.IsActing = true;
            }
        }
        else
        {
            agent.Reset();
        }
    }

    protected void Continue()
    {
        Game.PlayRound();
        Nav.NavigateTo("/results");
    }
}
