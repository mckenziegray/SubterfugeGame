@page  "/selectagents"
@inject GameService Game

<div class="row justify-content-center">
    <div class="col center-contents-horizontal">
        <h2>Day @Game.Round</h2>
        <p>Select up to @GameService.MAX_AGENT_SELECTIONS @(GameService.MAX_AGENT_SELECTIONS == 1 ? "agent" : "agents") to assign.</p>

        <TwoColumnGrid Items="Game.Agents.Allies">
            <ItemTemplate>
                @{
                    bool disabled = !context.IsAlive || (!context.IsActing && NumSelected >= GameService.MAX_AGENT_SELECTIONS);
                    <div class="btn-group-toggle" data-toggle="buttons">
                        <label class="btn btn-block btn-outline-dark @(context.IsActing ? "active" : disabled ? "disabled" : "")">
                            <input type="checkbox"
                                   checked="@context.IsActing"
                                   disabled="@disabled"
                                   @onchange="e => OnAgentCheckboxChanged(e, context)"
                                   @onchange:preventDefault
                                   autocomplete="off" />
                            @context.Name
                        </label>
                    </div>
                }
            </ItemTemplate>
        </TwoColumnGrid>

        <div class="row justify-content-center">
            <div class="col">
                <button class="btn btn-primary" @onclick="Continue">Confirm</button>
            </div>
        </div>
    </div>
</div>

@code
{
    public int NumSelected => Game.Agents.Allies.Count(a => a.IsActing);

    protected void OnAgentCheckboxChanged(ChangeEventArgs e, Agent agent)
    {
        bool isChecked = (bool)e.Value;

        if (isChecked)
        {
            if (agent.IsAlive && NumSelected < GameService.MAX_AGENT_SELECTIONS)
            {
                if (agent.RequiresTarget)
                    Nav.NavigateTo($"/selecttarget/{agent.GetType().Name}");
                else
                    agent.IsActing = true;
            }
        }
        else
        {
            agent.Reset();
        }
    }

    protected void Continue()
    {
        Game.PlayRound();
        Nav.NavigateTo("/results");
    }
}
