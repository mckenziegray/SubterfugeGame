# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference

[*.cs]

# Core editorconfig formatting - indentation

# Use soft tabs (spaces) for indentation
indent_style = space

# Formatting - indentation options

# Indent switch case contents.
csharp_indent_case_contents = true
# Indent switch labels
csharp_indent_switch_labels = true
# Indent block contents
csharp_indent_block_contents = true
# Do not indent braces
csharp_indent_braces = false
# Do not indent case blocks
csharp_indent_case_contents_when_block = false

# Formatting - new line options

# Require braces to be on a new line for all expressions ("Allman" style).
csharp_new_line_before_open_brace = all
# Place else statements on a new line
csharp_new_line_before_else = true
# Place catch statements on a new line
csharp_new_line_before_catch = true
# Place finally statements on a new line
csharp_new_line_before_finally = true
# Require members of object intializers to be on separate lines
csharp_new_line_before_members_in_object_initializers = true
# Require members of anonymous types to be on separate lines
csharp_new_line_before_members_in_anonymous_types = true

# Formatting - organize using options

# Sort System.* using directives alphabetically, and place them before other usings
dotnet_sort_system_directives_first = true
# Do not place a blank line between using directive groups.
dotnet_separate_import_directive_groups = false

# Formatting - spacing options

# Require NO space between a cast and the value
csharp_space_after_cast = false
# Require a space after a keyword in a control flow statement such as a for loop
csharp_space_after_keywords_in_control_flow_statements = true
# Require a space before the colon for bases or interfaces in a type declaration
csharp_space_before_colon_in_inheritance_clause = true
# Require a space before the colon for bases or interfaces in a type declaration
csharp_space_after_colon_in_inheritance_clause = true
# Require a space before and after a binary operator
csharp_space_around_binary_operators = before_and_after
# Place a space character after the opening parenthesis and before the closing parenthesis of a method declaration parameter list.
csharp_space_between_method_declaration_parameter_list_parentheses = false
# Remove space within empty parameter list parentheses for a method declaration
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
# Remove space characters between the method name and opening parenthesis in the method declaration
csharp_space_between_method_declaration_name_and_open_parenthesis = false
#do not place space characters after the opening parenthesis and before the closing parenthesis of a method call
csharp_space_between_method_call_parameter_list_parentheses = false
# Remove space within empty argument list parentheses
csharp_space_between_method_call_empty_parameter_list_parentheses = false
# Remove space between method call name and opening parenthesis
csharp_space_between_method_call_name_and_opening_parenthesis = false
# Insert space after a comma
csharp_space_after_comma = true
# Remove space before a comma
csharp_space_before_comma = false
# Remove space after a dot
csharp_space_after_dot = false
# Remove space before a dot
csharp_space_before_dot = false
# Require a space after a semicolon in a for statement
csharp_space_after_semicolon_in_for_statement = true
# Remove space before each semicolon in a for statement
csharp_space_before_semicolon_in_for_statement = false
# Remove space before opening square brackets [
csharp_space_before_open_square_brackets = false
# Remove space between empty square brackets []
csharp_space_between_empty_square_brackets = false
# Remove space characters in non-empty square brackets [0]
csharp_space_between_square_brackets = false

# Formatting - wrapping options

# Leave statements and member declarations on different lines
csharp_preserve_single_line_statements = false
# Leave code block on single line
csharp_preserve_single_line_blocks = true

# Style - Code block preferences

# Prefer curly braces even for one line of code
csharp_prefer_braces = when_multiline:warning
# Prefer to use a simple using statement
csharp_prefer_simple_using_statement = true:suggestion
# Prefer using directives to be placed outside the namespace
csharp_using_directive_placement = outside_namespace:warning

# Style - expression bodied member options

# Prefer expression bodies for accessors when they will be a single line
csharp_style_expression_bodied_accessors = when_on_single_line:suggestion
# Prefer block bodies for constructors
csharp_style_expression_bodied_constructors = false:suggestion
# Prefer block bodies for operators
csharp_style_expression_bodied_indexers = when_on_single_line:suggestion
# Prefer expression bodies for lambdas when they will be a single line
csharp_style_expression_bodied_lambdas = when_on_single_line:suggestion
# Prefer block bodies for methods
csharp_style_expression_bodied_methods = false:suggestion
# Prefer block bodies for operators
csharp_style_expression_bodied_operators = when_on_single_line:suggestion
# Prefer expression bodies for properties when they will be a single line
csharp_style_expression_bodied_properties = when_on_single_line:suggestion

# Style - expression level options

# Prefer objects to be initialized using object initializers when possible
dotnet_style_object_initializer = true:warning
# Prefer collections to be initialized using collection initializers when possible
dotnet_style_collection_initializer = true:warning
# Prefer tuple names to ItemX properties
dotnet_style_explicit_tuple_names = true:warning
# Prefer inferred tuple element names
dotnet_style_prefer_inferred_tuple_names = true:suggestion
# Prefer inferred anonymous type member names
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
# Prefer auto properties over properties with private backing fields
dotnet_style_prefer_auto_properties = true:warning
# Prefer assignments with a ternary conditional over an if-else statement
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
# Prefer return statements to use a ternary conditional over an if-else statement
dotnet_style_prefer_conditional_expression_over_return = true:suggestion
# Prefer compound assignment expressions
dotnet_style_prefer_compound_assignment = true:suggestion
# Prefer simplified interpolated strings
dotnet_style_prefer_simplified_interpolation = true:warning
# Prefer simplified conditional expressions
dotnet_style_prefer_simplified_boolean_expressions = true:warning
# Prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_member_access = true:suggestion
# Prefer out variables to be declared inline in the argument list of a method call when possible
csharp_style_inlined_variable_declaration = true:warning
# Prefer default over default(T)
csharp_prefer_simple_default_expression = true:warning
# Prefer local functions over anonymous functions
csharp_style_pattern_local_over_anonymous_function = true:suggestion
# Prefer deconstructed variable declaration
csharp_style_deconstructed_variable_declaration = true:warning
# Prefer to use the ^ operator when calculating an index from the end of a collection
csharp_style_prefer_index_operator = true:warning
# Prefer to use the range operator .. when extracting a "slice" of a collection
csharp_style_prefer_range_operator = true:warning

# Style - null-checking preferences

# Prefer null coalescing expressions to ternary operator checking
dotnet_style_coalesce_expression = true:warning
# Prefer to use null-conditional operator when possible
dotnet_style_null_propagation = true:warning
# Prefer is null check over reference equality method
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
# Prefer to use throw expressions instead of throw statements
csharp_style_throw_expression = true:suggestion
# Prefer to use the conditional coalescing operator (?.) when invoking a lambda expression, instead of performing a null check
csharp_style_conditional_delegate_call = true:warning

# Style - implicit and explicit types

# Prefer explicit type over var in all cases, unless overridden by another code style rule
csharp_style_var_elsewhere = false:warning
# Prefer explicit type over var to declare variables with built-in system types such as int
csharp_style_var_for_built_in_types = false:warning
# Prefer explicit type over var when the type is already mentioned on the right-hand side of a declaration
csharp_style_var_when_type_is_apparent = false:warning
# Prefer target-typed new expressions when created type is apparent
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion

# Style - language keyword and framework type options

# Prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
# Prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_member_access = true:warning

# Style - modifier options

# Prefer accessibility modifiers to be declared except for public interface members. This will currently not differ from always and will act as future proofing for if C# adds default interface methods.
dotnet_style_require_accessibility_modifiers = always:warning
# When this rule is set to a list of modifiers, prefer the specified ordering.
csharp_preferred_modifier_order = const,readonly,public,protected,private,static,override,virtual:silent
# Prefer that fields should be marked with readonly (C#) or ReadOnly (Visual Basic) if they are only ever assigned inline, or inside of a constructor
dotnet_style_readonly_field = true:suggestion
# Prefer local functions to be marked static
csharp_prefer_static_local_function = true:silent

# Style - Pattern matching

# Prefer pattern matching instead of is expressions with type casts
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
# Prefer pattern matching instead of is expression with type casts
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
# Prefer to use a switch expression (introduced with C# 8.0)
csharp_style_prefer_switch_expression = true:suggestion
# Prefer to use pattern matching constructs, when possible (introduced with C# 9.0)
csharp_style_prefer_pattern_matching = true:suggestion
# Prefer to use 'not' pattern, when possible (introduced with C# 9.0)
csharp_style_prefer_not_pattern = true:warning

# Style - qualification options

# Prefer events not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_event = false:suggestion
# Prefer fields not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_field = false:suggestion
# Prefer methods not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_method = false:suggestion
# Prefer properties not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_property = false:suggestion

# Style - parentheses preferences

# Prefer parentheses to clarify arithmetic operator (*, /, %, +, -, <<, >>, &, ^, |) precedence
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:suggestion
# Prefer parentheses to clarify relational operator (>, <, <=, >=, is, as, ==, !=) precedence
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:suggestion
# Prefer parentheses to clarify other binary operator (&&, ||, ??) precedence
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning
# Prefer to not have parentheses when operator precedence is obvious
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion

# Naming rules

# Require most symbols to be PascalCase
dotnet_naming_style.pascal.capitalization						= pascal_case

dotnet_naming_symbols.most_symbols.applicable_kinds				= namespace,class,struct,interface,enum,property,method,event,delegate,type_parameter
dotnet_naming_symbols.most_symbols.applicable_accessibilities	= public,internal,private,protected,protected_internal,private_protected

dotnet_naming_rule.most_symbols_must_be_pascal.symbols			= most_symbols
dotnet_naming_rule.most_symbols_must_be_pascal.style			= pascal
dotnet_naming_rule.most_symbols_must_be_pascal.severity			= warning

# Require parameters and local symbols to be camelCase
dotnet_naming_style.camel.capitalization						= camel_case

dotnet_naming_symbols.local_symbols.applicable_kinds			= local,local_function,parameter
dotnet_naming_symbols.local_symbols.applicable_accessibilities	= local

dotnet_naming_rule.local_symbols_must_be_camel.symbols			= local_symbols
dotnet_naming_rule.local_symbols_must_be_camel.style			= camel
dotnet_naming_rule.local_symbols_must_be_camel.severity			= warning

# Require private fields to be underscore-prefixed _camelCase
dotnet_naming_style.camel_with_underscore_prefix.capitalization			= camel_case
dotnet_naming_style.camel_with_underscore_prefix.required_prefix		= _

dotnet_naming_symbols.private_fields.applicable_kinds					= field
dotnet_naming_symbols.private_fields.applicable_accessibilities			= private

dotnet_naming_rule.private_fields_must_have_underscore_prefix.symbols	= private_fields
dotnet_naming_rule.private_fields_must_have_underscore_prefix.style		= camel_with_underscore_prefix
dotnet_naming_rule.private_fields_must_have_underscore_prefix.severity	= warning

# Require constants and readonlys to be ALL_CAPS
# NOTE: a readonly member should only be capitalized if it is a primitive type, but there is no way to specify this
dotnet_naming_style.all_caps.capitalization					= all_upper
dotnet_naming_style.all_caps.word_separator					= _

dotnet_naming_symbols.constants.applicable_kinds			= *
dotnet_naming_symbols.constants.applicable_accessibilities	= *
dotnet_naming_symbols.constants.required_modifiers			= const

dotnet_naming_rule.constants_must_be_caps.symbols			= constants
dotnet_naming_rule.constants_must_be_caps.style				= all_caps
dotnet_naming_rule.constants_must_be_caps.severity			= warning

dotnet_naming_symbols.readonlys.applicable_kinds			= *
dotnet_naming_symbols.readonlys.applicable_accessibilities	= *
dotnet_naming_symbols.readonlys.required_modifiers			= readonly

dotnet_naming_rule.readonlys_must_be_caps.symbols			= readonlys
dotnet_naming_rule.readonlys_must_be_caps.style				= all_caps
dotnet_naming_rule.readonlys_must_be_caps.severity			= suggestion

# Require interfaces to have the prefix "I"
dotnet_naming_style.i_prefix.required_prefix					= I

dotnet_naming_symbols.interfaces.applicable_kinds				= interface
dotnet_naming_symbols.interfaces.applicable_accessibilities		= *

dotnet_naming_rule.interfaces_must_have_i_prefix.symbols		= interfaces
dotnet_naming_rule.interfaces_must_have_i_prefix.style			= i_prefix
dotnet_naming_rule.interfaces_must_have_i_prefix.severity		= warning

# Require async methods to have the suffix "Async"
dotnet_naming_style.async_suffix.required_suffix					= Async

dotnet_naming_symbols.async_methods.applicable_kinds				= *
dotnet_naming_symbols.async_methods.applicable_accessibilities		= *
dotnet_naming_symbols.async_methods.required_modifiers				= async

dotnet_naming_rule.async_methods_must_have_async_suffix.symbols		= async_methods
dotnet_naming_rule.async_methods_must_have_async_suffix.style		= async_suffix
dotnet_naming_rule.async_methods_must_have_async_suffix.severity	= warning